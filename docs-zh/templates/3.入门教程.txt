入门教程
=======

### 获取UAST & UAST 的保存与读取

- UAST的文档见：[UAST Docs](https://hzy15610046011.gitee.io/metronome-static/html/api/universal_ast.html)

- 该示例位于`examples/uast-conversion`下

给定一个待分析的C文件:

MACRO {"kind": "file", "path": "examples/uast-conversion/uast-demo.c", "language": "c", "with_path": true}

可按如下步骤编程以进行分析:

MACRO {"kind": "file", "path": "examples/uast-conversion/demo.py", "language": "python", "with_path": true}

运行输出:

MACRO {"kind": "file", "path": "examples/uast-conversion/expected_out.txt", "language": "plaintext"}

可以看出，直接print输出的结果可读性并不太好，但查看打印出的JSON就轻松多了：

MACRO {"kind": "file", "path": "examples/uast-conversion/dumped-ast.json", "language": "json"}

以上的JSON是一个嵌套结构，每一项的`_cls`属性记录了UAST节点的类名，其余不以下划线开头的属性都是该节点相应对象的属性。

既然UAST可以保存，那么也可这样读取：

MACRO {"kind": "file", "path": "examples/uast-conversion/load_uast.py", "language": "python"}

### 遍历UAST

给定一个C文件：

MACRO {"kind": "file", "path": "examples/uast-traverse/demo.c", "language": "c"}

通过以下方法，可以遍历该C文件的所有FuncCall节点，并打印出其函数名：

MACRO {"kind": "file", "path": "examples/uast-traverse/demo.py", "language": "python"}

输出：

MACRO {"kind": "file", "path": "examples/uast-traverse/out.txt", "language": "plaintext"}

### 获取控制流图CFG

给定一个C文件：

MACRO {"kind": "file", "path": "examples/cfg-extraction/demo.c", "language": "c"}

运行如下Python文件将其转换为控制流图，并且输出Dot文件：

MACRO {"kind": "file", "path": "examples/cfg-extraction/demo.py", "language": "python"}

得到.dot文件之后，可以用`dot -Tpng cfg.dot -o cfg.png`转化cfg.dot为png格式的图片，如下图：

![生成的控制流图](../examples/cfg-extraction/cfg.png)

注意，如果提示没有安装dot，可以按照<https://graphviz.org/download/> 这里的方式进行安装
